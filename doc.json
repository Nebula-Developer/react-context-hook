[
  {
    "description": "",
    "tags": [
      {
        "title": "param",
        "description": "the component to connect with the store",
        "lineNumber": 1,
        "type": {
          "type": "NameExpression",
          "name": "ReactElement"
        },
        "name": "WrappedComponent"
      },
      {
        "title": "param",
        "description": "the initial store value or nothing",
        "lineNumber": 2,
        "type": {
          "type": "NameExpression",
          "name": "Object"
        },
        "name": "initialValue"
      },
      {
        "title": "param",
        "description": "the custom configuration. If nothing is passed will use the default config",
        "lineNumber": 3,
        "type": {
          "type": "NameExpression",
          "name": "Object"
        },
        "name": "config"
      },
      {
        "title": "param",
        "description": "a function that is triggered each time the store is modified.",
        "lineNumber": 4,
        "type": {
          "type": "NameExpression",
          "name": "Function"
        },
        "name": "config.listener"
      },
      {
        "title": "param",
        "description": "default `true` - if true the store will be protected by a Proxy. Set to false if your environment does not support Proxy. If you use `react-context-hook` in the browser set it to true",
        "lineNumber": 5,
        "type": {
          "type": "NameExpression",
          "name": "boolean"
        },
        "name": "config.proxyStore"
      },
      {
        "title": "example",
        "description": "const initialState = { count: 10 }\n\nconst storeConfig = {\n listener: state => {\n   console.log('state changed', state)\n },\n logging: true //process.env.NODE_ENV !== 'production'\n}\n\nexport default createStore(App, initialState, storeConfig)",
        "lineNumber": 6
      }
    ],
    "loc": {
      "start": {
        "line": 7,
        "column": 0
      },
      "end": {
        "line": 24,
        "column": 3
      }
    },
    "context": {
      "loc": {
        "start": {
          "line": 25,
          "column": 0
        },
        "end": {
          "line": 36,
          "column": 1
        }
      },
      "file": "/home/lspinelli/workspaces/my-github/react-context-hook/src/createStore.js",
      "github": {
        "url": "https://git@github.com/:Spyna/react-context-hook/blob/6e2546239cbaf9efbe881bb73bb286d7af3f224e/src/createStore.js#L25-L36",
        "path": "src/createStore.js"
      }
    },
    "augments": [],
    "examples": [
      {
        "description": "const initialState = { count: 10 }\n\nconst storeConfig = {\n listener: state => {\n   console.log('state changed', state)\n },\n logging: true //process.env.NODE_ENV !== 'production'\n}\n\nexport default createStore(App, initialState, storeConfig)"
      }
    ],
    "implements": [],
    "params": [
      {
        "title": "param",
        "name": "WrappedComponent",
        "lineNumber": 1,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "the component to connect with the store",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 40,
                      "offset": 39
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 40,
                  "offset": 39
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 40,
              "offset": 39
            }
          }
        },
        "type": {
          "type": "NameExpression",
          "name": "ReactElement"
        }
      },
      {
        "title": "param",
        "name": "initialValue",
        "lineNumber": 2,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "the initial store value or nothing",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 35,
                      "offset": 34
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 35,
                  "offset": 34
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 35,
              "offset": 34
            }
          }
        },
        "type": {
          "type": "NameExpression",
          "name": "Object"
        }
      },
      {
        "title": "param",
        "name": "config",
        "lineNumber": 3,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "the custom configuration. If nothing is passed will use the default config",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 75,
                      "offset": 74
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 75,
                  "offset": 74
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 75,
              "offset": 74
            }
          }
        },
        "type": {
          "type": "NameExpression",
          "name": "Object"
        },
        "properties": [
          {
            "title": "param",
            "name": "config.listener",
            "lineNumber": 4,
            "description": {
              "type": "root",
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "type": "text",
                      "value": "a function that is triggered each time the store is modified.",
                      "position": {
                        "start": {
                          "line": 1,
                          "column": 1,
                          "offset": 0
                        },
                        "end": {
                          "line": 1,
                          "column": 62,
                          "offset": 61
                        },
                        "indent": []
                      }
                    }
                  ],
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 62,
                      "offset": 61
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 62,
                  "offset": 61
                }
              }
            },
            "type": {
              "type": "NameExpression",
              "name": "Function"
            }
          },
          {
            "title": "param",
            "name": "config.proxyStore",
            "lineNumber": 5,
            "description": {
              "type": "root",
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "type": "text",
                      "value": "default ",
                      "position": {
                        "start": {
                          "line": 1,
                          "column": 1,
                          "offset": 0
                        },
                        "end": {
                          "line": 1,
                          "column": 9,
                          "offset": 8
                        },
                        "indent": []
                      }
                    },
                    {
                      "type": "inlineCode",
                      "value": "true",
                      "position": {
                        "start": {
                          "line": 1,
                          "column": 9,
                          "offset": 8
                        },
                        "end": {
                          "line": 1,
                          "column": 15,
                          "offset": 14
                        },
                        "indent": []
                      }
                    },
                    {
                      "type": "text",
                      "value": " - if true the store will be protected by a Proxy. Set to false if your environment does not support Proxy. If you use ",
                      "position": {
                        "start": {
                          "line": 1,
                          "column": 15,
                          "offset": 14
                        },
                        "end": {
                          "line": 1,
                          "column": 134,
                          "offset": 133
                        },
                        "indent": []
                      }
                    },
                    {
                      "type": "inlineCode",
                      "value": "react-context-hook",
                      "position": {
                        "start": {
                          "line": 1,
                          "column": 134,
                          "offset": 133
                        },
                        "end": {
                          "line": 1,
                          "column": 154,
                          "offset": 153
                        },
                        "indent": []
                      }
                    },
                    {
                      "type": "text",
                      "value": " in the browser set it to true",
                      "position": {
                        "start": {
                          "line": 1,
                          "column": 154,
                          "offset": 153
                        },
                        "end": {
                          "line": 1,
                          "column": 184,
                          "offset": 183
                        },
                        "indent": []
                      }
                    }
                  ],
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 184,
                      "offset": 183
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 184,
                  "offset": 183
                }
              }
            },
            "type": {
              "type": "NameExpression",
              "name": "boolean"
            }
          }
        ]
      }
    ],
    "properties": [],
    "returns": [],
    "sees": [],
    "throws": [],
    "todos": [],
    "yields": [],
    "name": "createStore",
    "kind": "constant",
    "members": {
      "global": [],
      "inner": [],
      "instance": [],
      "events": [],
      "static": []
    },
    "path": [
      {
        "name": "createStore",
        "kind": "constant"
      }
    ],
    "namespace": "createStore"
  },
  {
    "description": "",
    "tags": [
      {
        "title": "param",
        "description": "The lookup key to find the saved value in the store",
        "lineNumber": 2,
        "type": {
          "type": "NameExpression",
          "name": "string"
        },
        "name": "key"
      },
      {
        "title": "param",
        "description": "The value if the value in the store is missing",
        "lineNumber": 3,
        "type": {
          "type": "NameExpression",
          "name": "any"
        },
        "name": "defaultValue"
      },
      {
        "title": "param",
        "description": "if true and the data is missing it will be created in the store",
        "lineNumber": 4,
        "type": {
          "type": "NameExpression",
          "name": "boolean"
        },
        "name": "createIfMissing"
      },
      {
        "title": "returns",
        "description": "an array with length 3:<br>\nposition 0 - the value of the data in the store.<br>\nposition 1 - a function *setValue* to modify the data in the store. When used, this function return a promise that resolve nothing, thus you can use `setValue('a value').then(() => {doSomething() //when the store did update})`<br>\nposition 2 - a function *deleteValue* to delete the value from the store. When used, this function return a promise that resolve nothing, thus you can use `deleteValue('a value').then(() => {doSomething() //when the store did update})`",
        "lineNumber": 6,
        "type": {
          "type": "NameExpression",
          "name": "array"
        }
      },
      {
        "title": "example",
        "description": "import {useStore} from 'react-context-hook'\nconst [username, setUsername, deleteUsername] = useStore('username')\n<div>hello {username}</div>\n<button onClick={()=> setUsername('my_username')}>set username</button>",
        "lineNumber": 11
      }
    ],
    "loc": {
      "start": {
        "line": 8,
        "column": 0
      },
      "end": {
        "line": 25,
        "column": 3
      }
    },
    "context": {
      "loc": {
        "start": {
          "line": 26,
          "column": 0
        },
        "end": {
          "line": 37,
          "column": 1
        }
      },
      "file": "/home/lspinelli/workspaces/my-github/react-context-hook/src/useStore.js",
      "github": {
        "url": "https://git@github.com/:Spyna/react-context-hook/blob/6e2546239cbaf9efbe881bb73bb286d7af3f224e/src/useStore.js#L26-L37",
        "path": "src/useStore.js"
      }
    },
    "augments": [],
    "examples": [
      {
        "description": "import {useStore} from 'react-context-hook'\nconst [username, setUsername, deleteUsername] = useStore('username')\n<div>hello {username}</div>\n<button onClick={()=> setUsername('my_username')}>set username</button>"
      }
    ],
    "implements": [],
    "params": [
      {
        "title": "param",
        "name": "key",
        "lineNumber": 2,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "The lookup key to find the saved value in the store",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 52,
                      "offset": 51
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 52,
                  "offset": 51
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 52,
              "offset": 51
            }
          }
        },
        "type": {
          "type": "NameExpression",
          "name": "string"
        }
      },
      {
        "title": "param",
        "name": "defaultValue",
        "lineNumber": 3,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "The value if the value in the store is missing",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 47,
                      "offset": 46
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 47,
                  "offset": 46
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 47,
              "offset": 46
            }
          }
        },
        "type": {
          "type": "NameExpression",
          "name": "any"
        }
      },
      {
        "title": "param",
        "name": "createIfMissing",
        "lineNumber": 4,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "if true and the data is missing it will be created in the store",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 64,
                      "offset": 63
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 64,
                  "offset": 63
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 64,
              "offset": 63
            }
          }
        },
        "type": {
          "type": "NameExpression",
          "name": "boolean"
        }
      }
    ],
    "properties": [],
    "returns": [
      {
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "an array with length 3:",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 24,
                      "offset": 23
                    },
                    "indent": []
                  }
                },
                {
                  "type": "html",
                  "value": "<br>",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 24,
                      "offset": 23
                    },
                    "end": {
                      "line": 1,
                      "column": 28,
                      "offset": 27
                    },
                    "indent": []
                  }
                },
                {
                  "type": "text",
                  "value": "\nposition 0 - the value of the data in the store.",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 28,
                      "offset": 27
                    },
                    "end": {
                      "line": 2,
                      "column": 49,
                      "offset": 76
                    },
                    "indent": [
                      1
                    ]
                  }
                },
                {
                  "type": "html",
                  "value": "<br>",
                  "position": {
                    "start": {
                      "line": 2,
                      "column": 49,
                      "offset": 76
                    },
                    "end": {
                      "line": 2,
                      "column": 53,
                      "offset": 80
                    },
                    "indent": []
                  }
                },
                {
                  "type": "text",
                  "value": "\nposition 1 - a function ",
                  "position": {
                    "start": {
                      "line": 2,
                      "column": 53,
                      "offset": 80
                    },
                    "end": {
                      "line": 3,
                      "column": 25,
                      "offset": 105
                    },
                    "indent": [
                      1
                    ]
                  }
                },
                {
                  "type": "emphasis",
                  "children": [
                    {
                      "type": "text",
                      "value": "setValue",
                      "position": {
                        "start": {
                          "line": 3,
                          "column": 26,
                          "offset": 106
                        },
                        "end": {
                          "line": 3,
                          "column": 34,
                          "offset": 114
                        },
                        "indent": []
                      }
                    }
                  ],
                  "position": {
                    "start": {
                      "line": 3,
                      "column": 25,
                      "offset": 105
                    },
                    "end": {
                      "line": 3,
                      "column": 35,
                      "offset": 115
                    },
                    "indent": []
                  }
                },
                {
                  "type": "text",
                  "value": " to modify the data in the store. When used, this function return a promise that resolve nothing, thus you can use ",
                  "position": {
                    "start": {
                      "line": 3,
                      "column": 35,
                      "offset": 115
                    },
                    "end": {
                      "line": 3,
                      "column": 150,
                      "offset": 230
                    },
                    "indent": []
                  }
                },
                {
                  "type": "inlineCode",
                  "value": "setValue('a value').then(() => {doSomething() //when the store did update})",
                  "position": {
                    "start": {
                      "line": 3,
                      "column": 150,
                      "offset": 230
                    },
                    "end": {
                      "line": 3,
                      "column": 227,
                      "offset": 307
                    },
                    "indent": []
                  }
                },
                {
                  "type": "html",
                  "value": "<br>",
                  "position": {
                    "start": {
                      "line": 3,
                      "column": 227,
                      "offset": 307
                    },
                    "end": {
                      "line": 3,
                      "column": 231,
                      "offset": 311
                    },
                    "indent": []
                  }
                },
                {
                  "type": "text",
                  "value": "\nposition 2 - a function ",
                  "position": {
                    "start": {
                      "line": 3,
                      "column": 231,
                      "offset": 311
                    },
                    "end": {
                      "line": 4,
                      "column": 25,
                      "offset": 336
                    },
                    "indent": [
                      1
                    ]
                  }
                },
                {
                  "type": "emphasis",
                  "children": [
                    {
                      "type": "text",
                      "value": "deleteValue",
                      "position": {
                        "start": {
                          "line": 4,
                          "column": 26,
                          "offset": 337
                        },
                        "end": {
                          "line": 4,
                          "column": 37,
                          "offset": 348
                        },
                        "indent": []
                      }
                    }
                  ],
                  "position": {
                    "start": {
                      "line": 4,
                      "column": 25,
                      "offset": 336
                    },
                    "end": {
                      "line": 4,
                      "column": 38,
                      "offset": 349
                    },
                    "indent": []
                  }
                },
                {
                  "type": "text",
                  "value": " to delete the value from the store. When used, this function return a promise that resolve nothing, thus you can use ",
                  "position": {
                    "start": {
                      "line": 4,
                      "column": 38,
                      "offset": 349
                    },
                    "end": {
                      "line": 4,
                      "column": 156,
                      "offset": 467
                    },
                    "indent": []
                  }
                },
                {
                  "type": "inlineCode",
                  "value": "deleteValue('a value').then(() => {doSomething() //when the store did update})",
                  "position": {
                    "start": {
                      "line": 4,
                      "column": 156,
                      "offset": 467
                    },
                    "end": {
                      "line": 4,
                      "column": 236,
                      "offset": 547
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 4,
                  "column": 236,
                  "offset": 547
                },
                "indent": [
                  1,
                  1,
                  1
                ]
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 4,
              "column": 236,
              "offset": 547
            }
          }
        },
        "title": "returns",
        "type": {
          "type": "NameExpression",
          "name": "array"
        }
      }
    ],
    "sees": [],
    "throws": [],
    "todos": [],
    "yields": [],
    "name": "useStore",
    "kind": "function",
    "members": {
      "global": [],
      "inner": [],
      "instance": [],
      "events": [],
      "static": []
    },
    "path": [
      {
        "name": "useStore",
        "kind": "function"
      }
    ],
    "namespace": "useStore"
  },
  {
    "description": {
      "type": "root",
      "children": [
        {
          "type": "paragraph",
          "children": [
            {
              "type": "text",
              "value": "Returns the whole store value, with all the variables stored in it. Changes to this object will not change the store",
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 117,
                  "offset": 116
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 117,
              "offset": 116
            },
            "indent": []
          }
        }
      ],
      "position": {
        "start": {
          "line": 1,
          "column": 1,
          "offset": 0
        },
        "end": {
          "line": 1,
          "column": 117,
          "offset": 116
        }
      }
    },
    "tags": [
      {
        "title": "returns",
        "description": "An object representing the whole store value in read only mode.",
        "lineNumber": 3,
        "type": {
          "type": "NameExpression",
          "name": "object"
        }
      },
      {
        "title": "example",
        "description": "import {useStoreState} from 'react-context-hook'\nconst store = useStoreState()\nconsole.log('the store is', JSON.stringify(store))",
        "lineNumber": 5
      }
    ],
    "loc": {
      "start": {
        "line": 39,
        "column": 0
      },
      "end": {
        "line": 48,
        "column": 3
      }
    },
    "context": {
      "loc": {
        "start": {
          "line": 49,
          "column": 0
        },
        "end": {
          "line": 51,
          "column": 1
        }
      },
      "file": "/home/lspinelli/workspaces/my-github/react-context-hook/src/useStore.js",
      "github": {
        "url": "https://git@github.com/:Spyna/react-context-hook/blob/6e2546239cbaf9efbe881bb73bb286d7af3f224e/src/useStore.js#L49-L51",
        "path": "src/useStore.js"
      }
    },
    "augments": [],
    "examples": [
      {
        "description": "import {useStoreState} from 'react-context-hook'\nconst store = useStoreState()\nconsole.log('the store is', JSON.stringify(store))"
      }
    ],
    "implements": [],
    "params": [],
    "properties": [],
    "returns": [
      {
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "An object representing the whole store value in read only mode.",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 64,
                      "offset": 63
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 64,
                  "offset": 63
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 64,
              "offset": 63
            }
          }
        },
        "title": "returns",
        "type": {
          "type": "NameExpression",
          "name": "object"
        }
      }
    ],
    "sees": [],
    "throws": [],
    "todos": [],
    "yields": [],
    "name": "useStoreState",
    "kind": "function",
    "members": {
      "global": [],
      "inner": [],
      "instance": [],
      "events": [],
      "static": []
    },
    "path": [
      {
        "name": "useStoreState",
        "kind": "function"
      }
    ],
    "namespace": "useStoreState"
  },
  {
    "description": {
      "type": "root",
      "children": [
        {
          "type": "paragraph",
          "children": [
            {
              "type": "text",
              "value": "Returns a function to set or update a variable in the store. You want to use this hook when you just need to modify the store, not read or delete a value from it.",
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 163,
                  "offset": 162
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 163,
              "offset": 162
            },
            "indent": []
          }
        }
      ],
      "position": {
        "start": {
          "line": 1,
          "column": 1,
          "offset": 0
        },
        "end": {
          "line": 1,
          "column": 163,
          "offset": 162
        }
      }
    },
    "tags": [
      {
        "title": "param",
        "description": "the name of the variable to set in the store",
        "lineNumber": 2,
        "type": {
          "type": "NameExpression",
          "name": "string"
        },
        "name": "key"
      },
      {
        "title": "returns",
        "description": "a function to set a variable in the store with the given name When used, this function return a promise that resolve nothing, thus you can use `setValue('a value').then(() => {doSomething() //when the store did update})`",
        "lineNumber": 3,
        "type": {
          "type": "NameExpression",
          "name": "Function"
        }
      },
      {
        "title": "example",
        "description": "import {useSetStoreValue} from 'react-context-hook'\nconst setUsername = useSetStoreValue('username')\n<button onClick={()=> setUsername('my_username')}>set username</button>",
        "lineNumber": 5
      }
    ],
    "loc": {
      "start": {
        "line": 53,
        "column": 0
      },
      "end": {
        "line": 62,
        "column": 3
      }
    },
    "context": {
      "loc": {
        "start": {
          "line": 63,
          "column": 0
        },
        "end": {
          "line": 66,
          "column": 1
        }
      },
      "file": "/home/lspinelli/workspaces/my-github/react-context-hook/src/useStore.js",
      "github": {
        "url": "https://git@github.com/:Spyna/react-context-hook/blob/6e2546239cbaf9efbe881bb73bb286d7af3f224e/src/useStore.js#L63-L66",
        "path": "src/useStore.js"
      }
    },
    "augments": [],
    "examples": [
      {
        "description": "import {useSetStoreValue} from 'react-context-hook'\nconst setUsername = useSetStoreValue('username')\n<button onClick={()=> setUsername('my_username')}>set username</button>"
      }
    ],
    "implements": [],
    "params": [
      {
        "title": "param",
        "name": "key",
        "lineNumber": 2,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "the name of the variable to set in the store",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 45,
                      "offset": 44
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 45,
                  "offset": 44
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 45,
              "offset": 44
            }
          }
        },
        "type": {
          "type": "NameExpression",
          "name": "string"
        }
      }
    ],
    "properties": [],
    "returns": [
      {
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "a function to set a variable in the store with the given name When used, this function return a promise that resolve nothing, thus you can use ",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 144,
                      "offset": 143
                    },
                    "indent": []
                  }
                },
                {
                  "type": "inlineCode",
                  "value": "setValue('a value').then(() => {doSomething() //when the store did update})",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 144,
                      "offset": 143
                    },
                    "end": {
                      "line": 1,
                      "column": 221,
                      "offset": 220
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 221,
                  "offset": 220
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 221,
              "offset": 220
            }
          }
        },
        "title": "returns",
        "type": {
          "type": "NameExpression",
          "name": "Function"
        }
      }
    ],
    "sees": [],
    "throws": [],
    "todos": [],
    "yields": [],
    "name": "useSetStoreValue",
    "kind": "function",
    "members": {
      "global": [],
      "inner": [],
      "instance": [],
      "events": [],
      "static": []
    },
    "path": [
      {
        "name": "useSetStoreValue",
        "kind": "function"
      }
    ],
    "namespace": "useSetStoreValue"
  },
  {
    "description": {
      "type": "root",
      "children": [
        {
          "type": "paragraph",
          "children": [
            {
              "type": "text",
              "value": "Returns a function to delete a variable in the store. You want to use this hook when you just need to delete a value in the store, not read or set a value from it.",
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 164,
                  "offset": 163
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 164,
              "offset": 163
            },
            "indent": []
          }
        }
      ],
      "position": {
        "start": {
          "line": 1,
          "column": 1,
          "offset": 0
        },
        "end": {
          "line": 1,
          "column": 164,
          "offset": 163
        }
      }
    },
    "tags": [
      {
        "title": "param",
        "description": "the name of the variable to set in the store",
        "lineNumber": 2,
        "type": {
          "type": "NameExpression",
          "name": "string"
        },
        "name": "key"
      },
      {
        "title": "returns",
        "description": "a function to delete a variable in the store with the given name. When used, this function return a promise that resolve nothing, thus you can use `deleteValue('a value').then(() => {doSomething() //when the store did update})`",
        "lineNumber": 3,
        "type": {
          "type": "NameExpression",
          "name": "Function"
        }
      },
      {
        "title": "example",
        "description": "import {useDeleteStoreValue} from 'react-context-hook'\nconst deleteUsername = useDeleteStoreValue('username')\n<button onClick={()=> deleteUsername('my_username')}>set username</button>",
        "lineNumber": 5
      }
    ],
    "loc": {
      "start": {
        "line": 68,
        "column": 0
      },
      "end": {
        "line": 77,
        "column": 3
      }
    },
    "context": {
      "loc": {
        "start": {
          "line": 78,
          "column": 0
        },
        "end": {
          "line": 81,
          "column": 1
        }
      },
      "file": "/home/lspinelli/workspaces/my-github/react-context-hook/src/useStore.js",
      "github": {
        "url": "https://git@github.com/:Spyna/react-context-hook/blob/6e2546239cbaf9efbe881bb73bb286d7af3f224e/src/useStore.js#L78-L81",
        "path": "src/useStore.js"
      }
    },
    "augments": [],
    "examples": [
      {
        "description": "import {useDeleteStoreValue} from 'react-context-hook'\nconst deleteUsername = useDeleteStoreValue('username')\n<button onClick={()=> deleteUsername('my_username')}>set username</button>"
      }
    ],
    "implements": [],
    "params": [
      {
        "title": "param",
        "name": "key",
        "lineNumber": 2,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "the name of the variable to set in the store",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 45,
                      "offset": 44
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 45,
                  "offset": 44
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 45,
              "offset": 44
            }
          }
        },
        "type": {
          "type": "NameExpression",
          "name": "string"
        }
      }
    ],
    "properties": [],
    "returns": [
      {
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "a function to delete a variable in the store with the given name. When used, this function return a promise that resolve nothing, thus you can use ",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 148,
                      "offset": 147
                    },
                    "indent": []
                  }
                },
                {
                  "type": "inlineCode",
                  "value": "deleteValue('a value').then(() => {doSomething() //when the store did update})",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 148,
                      "offset": 147
                    },
                    "end": {
                      "line": 1,
                      "column": 228,
                      "offset": 227
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 228,
                  "offset": 227
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 228,
              "offset": 227
            }
          }
        },
        "title": "returns",
        "type": {
          "type": "NameExpression",
          "name": "Function"
        }
      }
    ],
    "sees": [],
    "throws": [],
    "todos": [],
    "yields": [],
    "name": "useDeleteStoreValue",
    "kind": "function",
    "members": {
      "global": [],
      "inner": [],
      "instance": [],
      "events": [],
      "static": []
    },
    "path": [
      {
        "name": "useDeleteStoreValue",
        "kind": "function"
      }
    ],
    "namespace": "useDeleteStoreValue"
  },
  {
    "description": {
      "type": "root",
      "children": [
        {
          "type": "paragraph",
          "children": [
            {
              "type": "text",
              "value": "This React hook returns an array to read and modify a value in the store:\n",
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 2,
                  "column": 1,
                  "offset": 74
                },
                "indent": [
                  1
                ]
              }
            },
            {
              "type": "inlineCode",
              "value": "const [value, setValue] = useGetAndset('a_lookup_key_in_the_store')",
              "position": {
                "start": {
                  "line": 2,
                  "column": 1,
                  "offset": 74
                },
                "end": {
                  "line": 2,
                  "column": 70,
                  "offset": 143
                },
                "indent": []
              }
            },
            {
              "type": "text",
              "value": ". The name of the variable in the arry is arbitrary and you can choose any string you like.",
              "position": {
                "start": {
                  "line": 2,
                  "column": 70,
                  "offset": 143
                },
                "end": {
                  "line": 2,
                  "column": 161,
                  "offset": 234
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 2,
              "column": 161,
              "offset": 234
            },
            "indent": [
              1
            ]
          }
        }
      ],
      "position": {
        "start": {
          "line": 1,
          "column": 1,
          "offset": 0
        },
        "end": {
          "line": 2,
          "column": 161,
          "offset": 234
        }
      }
    },
    "tags": [
      {
        "title": "param",
        "description": "The lookup key to find the saved value in the store",
        "lineNumber": 3,
        "type": {
          "type": "NameExpression",
          "name": "string"
        },
        "name": "key"
      },
      {
        "title": "returns",
        "description": "an array with length 2:<br>\nposition 0 - the value of the data in the store.<br>\nposition 1 - a function *setValue* to modify the data in the store. When used, this function return a promise that resolve nothing, thus you can use `setValue('a value').then(() => {doSomething() //when the store did update})`<br>",
        "lineNumber": 5,
        "type": {
          "type": "NameExpression",
          "name": "array"
        }
      },
      {
        "title": "example",
        "description": "import {useGetAndset} from 'react-context-hook'\nconst [username, setUsername] = useGetAndset('username')\n<div>hello {username}</div>\n<button onClick={()=> setUsername('my_username')}>set username</button>\n\n const [value, setValue] = useGetAndset('a_lookup_key_in_the_store')",
        "lineNumber": 9
      }
    ],
    "loc": {
      "start": {
        "line": 83,
        "column": 0
      },
      "end": {
        "line": 100,
        "column": 3
      }
    },
    "context": {
      "loc": {
        "start": {
          "line": 101,
          "column": 0
        },
        "end": {
          "line": 103,
          "column": 1
        }
      },
      "file": "/home/lspinelli/workspaces/my-github/react-context-hook/src/useStore.js",
      "github": {
        "url": "https://git@github.com/:Spyna/react-context-hook/blob/6e2546239cbaf9efbe881bb73bb286d7af3f224e/src/useStore.js#L101-L103",
        "path": "src/useStore.js"
      }
    },
    "augments": [],
    "examples": [
      {
        "description": "import {useGetAndset} from 'react-context-hook'\nconst [username, setUsername] = useGetAndset('username')\n<div>hello {username}</div>\n<button onClick={()=> setUsername('my_username')}>set username</button>\n\n const [value, setValue] = useGetAndset('a_lookup_key_in_the_store')"
      }
    ],
    "implements": [],
    "params": [
      {
        "title": "param",
        "name": "key",
        "lineNumber": 3,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "The lookup key to find the saved value in the store",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 52,
                      "offset": 51
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 52,
                  "offset": 51
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 52,
              "offset": 51
            }
          }
        },
        "type": {
          "type": "NameExpression",
          "name": "string"
        }
      }
    ],
    "properties": [],
    "returns": [
      {
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "an array with length 2:",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 24,
                      "offset": 23
                    },
                    "indent": []
                  }
                },
                {
                  "type": "html",
                  "value": "<br>",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 24,
                      "offset": 23
                    },
                    "end": {
                      "line": 1,
                      "column": 28,
                      "offset": 27
                    },
                    "indent": []
                  }
                },
                {
                  "type": "text",
                  "value": "\nposition 0 - the value of the data in the store.",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 28,
                      "offset": 27
                    },
                    "end": {
                      "line": 2,
                      "column": 49,
                      "offset": 76
                    },
                    "indent": [
                      1
                    ]
                  }
                },
                {
                  "type": "html",
                  "value": "<br>",
                  "position": {
                    "start": {
                      "line": 2,
                      "column": 49,
                      "offset": 76
                    },
                    "end": {
                      "line": 2,
                      "column": 53,
                      "offset": 80
                    },
                    "indent": []
                  }
                },
                {
                  "type": "text",
                  "value": "\nposition 1 - a function ",
                  "position": {
                    "start": {
                      "line": 2,
                      "column": 53,
                      "offset": 80
                    },
                    "end": {
                      "line": 3,
                      "column": 25,
                      "offset": 105
                    },
                    "indent": [
                      1
                    ]
                  }
                },
                {
                  "type": "emphasis",
                  "children": [
                    {
                      "type": "text",
                      "value": "setValue",
                      "position": {
                        "start": {
                          "line": 3,
                          "column": 26,
                          "offset": 106
                        },
                        "end": {
                          "line": 3,
                          "column": 34,
                          "offset": 114
                        },
                        "indent": []
                      }
                    }
                  ],
                  "position": {
                    "start": {
                      "line": 3,
                      "column": 25,
                      "offset": 105
                    },
                    "end": {
                      "line": 3,
                      "column": 35,
                      "offset": 115
                    },
                    "indent": []
                  }
                },
                {
                  "type": "text",
                  "value": " to modify the data in the store. When used, this function return a promise that resolve nothing, thus you can use ",
                  "position": {
                    "start": {
                      "line": 3,
                      "column": 35,
                      "offset": 115
                    },
                    "end": {
                      "line": 3,
                      "column": 150,
                      "offset": 230
                    },
                    "indent": []
                  }
                },
                {
                  "type": "inlineCode",
                  "value": "setValue('a value').then(() => {doSomething() //when the store did update})",
                  "position": {
                    "start": {
                      "line": 3,
                      "column": 150,
                      "offset": 230
                    },
                    "end": {
                      "line": 3,
                      "column": 227,
                      "offset": 307
                    },
                    "indent": []
                  }
                },
                {
                  "type": "html",
                  "value": "<br>",
                  "position": {
                    "start": {
                      "line": 3,
                      "column": 227,
                      "offset": 307
                    },
                    "end": {
                      "line": 3,
                      "column": 231,
                      "offset": 311
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 3,
                  "column": 231,
                  "offset": 311
                },
                "indent": [
                  1,
                  1
                ]
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 3,
              "column": 231,
              "offset": 311
            }
          }
        },
        "title": "returns",
        "type": {
          "type": "NameExpression",
          "name": "array"
        }
      }
    ],
    "sees": [],
    "throws": [],
    "todos": [],
    "yields": [],
    "name": "useGetAndset",
    "kind": "function",
    "members": {
      "global": [],
      "inner": [],
      "instance": [],
      "events": [],
      "static": []
    },
    "path": [
      {
        "name": "useGetAndset",
        "kind": "function"
      }
    ],
    "namespace": "useGetAndset"
  },
  {
    "description": {
      "type": "root",
      "children": [
        {
          "type": "paragraph",
          "children": [
            {
              "type": "text",
              "value": "This React hook returns an array to read and delete a value in the store:\n",
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 2,
                  "column": 1,
                  "offset": 74
                },
                "indent": [
                  1
                ]
              }
            },
            {
              "type": "inlineCode",
              "value": "const [value, deleteValue] = useGetAndDelete('a_lookup_key_in_the_store')",
              "position": {
                "start": {
                  "line": 2,
                  "column": 1,
                  "offset": 74
                },
                "end": {
                  "line": 2,
                  "column": 76,
                  "offset": 149
                },
                "indent": []
              }
            },
            {
              "type": "text",
              "value": ". The name of the variable in the arry is arbitrary and you can choose any string you like.",
              "position": {
                "start": {
                  "line": 2,
                  "column": 76,
                  "offset": 149
                },
                "end": {
                  "line": 2,
                  "column": 167,
                  "offset": 240
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 2,
              "column": 167,
              "offset": 240
            },
            "indent": [
              1
            ]
          }
        }
      ],
      "position": {
        "start": {
          "line": 1,
          "column": 1,
          "offset": 0
        },
        "end": {
          "line": 2,
          "column": 167,
          "offset": 240
        }
      }
    },
    "tags": [
      {
        "title": "param",
        "description": "The lookup key to find the saved value in the store",
        "lineNumber": 3,
        "type": {
          "type": "NameExpression",
          "name": "string"
        },
        "name": "key"
      },
      {
        "title": "returns",
        "description": "an array with length 2:<br>\nposition 0 - the value of the data in the store.<br>\nposition 1 - a function *deleteValue* to delete the data in the store. When used, this function return a promise that resolve nothing, thus you can use `deleteValue('a value').then(() => {doSomething() //when the store did update})`<br>",
        "lineNumber": 5,
        "type": {
          "type": "NameExpression",
          "name": "array"
        }
      },
      {
        "title": "example",
        "description": "import {useGetAndDelete} from 'react-context-hook'\nconst [username, deleteUsername] = useGetAndDelete('username')\n<div>hello {username}</div>\n<button onClick={()=> deleteUsername('my_username')}>set username</button>",
        "lineNumber": 9
      }
    ],
    "loc": {
      "start": {
        "line": 105,
        "column": 0
      },
      "end": {
        "line": 120,
        "column": 3
      }
    },
    "context": {
      "loc": {
        "start": {
          "line": 121,
          "column": 0
        },
        "end": {
          "line": 123,
          "column": 1
        }
      },
      "file": "/home/lspinelli/workspaces/my-github/react-context-hook/src/useStore.js",
      "github": {
        "url": "https://git@github.com/:Spyna/react-context-hook/blob/6e2546239cbaf9efbe881bb73bb286d7af3f224e/src/useStore.js#L121-L123",
        "path": "src/useStore.js"
      }
    },
    "augments": [],
    "examples": [
      {
        "description": "import {useGetAndDelete} from 'react-context-hook'\nconst [username, deleteUsername] = useGetAndDelete('username')\n<div>hello {username}</div>\n<button onClick={()=> deleteUsername('my_username')}>set username</button>"
      }
    ],
    "implements": [],
    "params": [
      {
        "title": "param",
        "name": "key",
        "lineNumber": 3,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "The lookup key to find the saved value in the store",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 52,
                      "offset": 51
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 52,
                  "offset": 51
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 52,
              "offset": 51
            }
          }
        },
        "type": {
          "type": "NameExpression",
          "name": "string"
        }
      }
    ],
    "properties": [],
    "returns": [
      {
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "an array with length 2:",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 24,
                      "offset": 23
                    },
                    "indent": []
                  }
                },
                {
                  "type": "html",
                  "value": "<br>",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 24,
                      "offset": 23
                    },
                    "end": {
                      "line": 1,
                      "column": 28,
                      "offset": 27
                    },
                    "indent": []
                  }
                },
                {
                  "type": "text",
                  "value": "\nposition 0 - the value of the data in the store.",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 28,
                      "offset": 27
                    },
                    "end": {
                      "line": 2,
                      "column": 49,
                      "offset": 76
                    },
                    "indent": [
                      1
                    ]
                  }
                },
                {
                  "type": "html",
                  "value": "<br>",
                  "position": {
                    "start": {
                      "line": 2,
                      "column": 49,
                      "offset": 76
                    },
                    "end": {
                      "line": 2,
                      "column": 53,
                      "offset": 80
                    },
                    "indent": []
                  }
                },
                {
                  "type": "text",
                  "value": "\nposition 1 - a function ",
                  "position": {
                    "start": {
                      "line": 2,
                      "column": 53,
                      "offset": 80
                    },
                    "end": {
                      "line": 3,
                      "column": 25,
                      "offset": 105
                    },
                    "indent": [
                      1
                    ]
                  }
                },
                {
                  "type": "emphasis",
                  "children": [
                    {
                      "type": "text",
                      "value": "deleteValue",
                      "position": {
                        "start": {
                          "line": 3,
                          "column": 26,
                          "offset": 106
                        },
                        "end": {
                          "line": 3,
                          "column": 37,
                          "offset": 117
                        },
                        "indent": []
                      }
                    }
                  ],
                  "position": {
                    "start": {
                      "line": 3,
                      "column": 25,
                      "offset": 105
                    },
                    "end": {
                      "line": 3,
                      "column": 38,
                      "offset": 118
                    },
                    "indent": []
                  }
                },
                {
                  "type": "text",
                  "value": " to delete the data in the store. When used, this function return a promise that resolve nothing, thus you can use ",
                  "position": {
                    "start": {
                      "line": 3,
                      "column": 38,
                      "offset": 118
                    },
                    "end": {
                      "line": 3,
                      "column": 153,
                      "offset": 233
                    },
                    "indent": []
                  }
                },
                {
                  "type": "inlineCode",
                  "value": "deleteValue('a value').then(() => {doSomething() //when the store did update})",
                  "position": {
                    "start": {
                      "line": 3,
                      "column": 153,
                      "offset": 233
                    },
                    "end": {
                      "line": 3,
                      "column": 233,
                      "offset": 313
                    },
                    "indent": []
                  }
                },
                {
                  "type": "html",
                  "value": "<br>",
                  "position": {
                    "start": {
                      "line": 3,
                      "column": 233,
                      "offset": 313
                    },
                    "end": {
                      "line": 3,
                      "column": 237,
                      "offset": 317
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 3,
                  "column": 237,
                  "offset": 317
                },
                "indent": [
                  1,
                  1
                ]
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 3,
              "column": 237,
              "offset": 317
            }
          }
        },
        "title": "returns",
        "type": {
          "type": "NameExpression",
          "name": "array"
        }
      }
    ],
    "sees": [],
    "throws": [],
    "todos": [],
    "yields": [],
    "name": "useGetAndDelete",
    "kind": "function",
    "members": {
      "global": [],
      "inner": [],
      "instance": [],
      "events": [],
      "static": []
    },
    "path": [
      {
        "name": "useGetAndDelete",
        "kind": "function"
      }
    ],
    "namespace": "useGetAndDelete"
  },
  {
    "description": {
      "type": "root",
      "children": [
        {
          "type": "paragraph",
          "children": [
            {
              "type": "text",
              "value": "This React hook returns an array to set and delete a value in the store:\n",
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 2,
                  "column": 1,
                  "offset": 73
                },
                "indent": [
                  1
                ]
              }
            },
            {
              "type": "inlineCode",
              "value": "const [setValue, deleteValue] = useGetAndDelete('a_lookup_key_in_the_store')",
              "position": {
                "start": {
                  "line": 2,
                  "column": 1,
                  "offset": 73
                },
                "end": {
                  "line": 2,
                  "column": 79,
                  "offset": 151
                },
                "indent": []
              }
            },
            {
              "type": "text",
              "value": ". The name of the variable in the arry is arbitrary and you can choose any string you like.",
              "position": {
                "start": {
                  "line": 2,
                  "column": 79,
                  "offset": 151
                },
                "end": {
                  "line": 2,
                  "column": 170,
                  "offset": 242
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 2,
              "column": 170,
              "offset": 242
            },
            "indent": [
              1
            ]
          }
        }
      ],
      "position": {
        "start": {
          "line": 1,
          "column": 1,
          "offset": 0
        },
        "end": {
          "line": 2,
          "column": 170,
          "offset": 242
        }
      }
    },
    "tags": [
      {
        "title": "param",
        "description": "The lookup key to find the saved value in the store",
        "lineNumber": 3,
        "type": {
          "type": "NameExpression",
          "name": "string"
        },
        "name": "key"
      },
      {
        "title": "returns",
        "description": "an array with length 2:<br>\nposition 0 - a function *setValue* to modify the data in the store. When used, this function return a promise that resolve nothing, thus you can use `setValue('a value').then(() => {doSomething() //when the store did update})`<br>\nposition 1 - a function *deleteValue* to delete the data in the store. When used, this function return a promise that resolve nothing, thus you can use `deleteValue('a value').then(() => {doSomething() //when the store did update})`<br>",
        "lineNumber": 5,
        "type": {
          "type": "NameExpression",
          "name": "array"
        }
      },
      {
        "title": "example",
        "description": "import {useGetAndDelete} from 'react-context-hook'\nconst [username, deleteUsername] = useGetAndDelete('username')\n<div>hello {username}</div>\n<button onClick={()=> deleteUsername('my_username')}>set username</button>",
        "lineNumber": 9
      }
    ],
    "loc": {
      "start": {
        "line": 125,
        "column": 0
      },
      "end": {
        "line": 140,
        "column": 3
      }
    },
    "context": {
      "loc": {
        "start": {
          "line": 141,
          "column": 0
        },
        "end": {
          "line": 143,
          "column": 1
        }
      },
      "file": "/home/lspinelli/workspaces/my-github/react-context-hook/src/useStore.js",
      "github": {
        "url": "https://git@github.com/:Spyna/react-context-hook/blob/6e2546239cbaf9efbe881bb73bb286d7af3f224e/src/useStore.js#L141-L143",
        "path": "src/useStore.js"
      }
    },
    "augments": [],
    "examples": [
      {
        "description": "import {useGetAndDelete} from 'react-context-hook'\nconst [username, deleteUsername] = useGetAndDelete('username')\n<div>hello {username}</div>\n<button onClick={()=> deleteUsername('my_username')}>set username</button>"
      }
    ],
    "implements": [],
    "params": [
      {
        "title": "param",
        "name": "key",
        "lineNumber": 3,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "The lookup key to find the saved value in the store",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 52,
                      "offset": 51
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 52,
                  "offset": 51
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 52,
              "offset": 51
            }
          }
        },
        "type": {
          "type": "NameExpression",
          "name": "string"
        }
      }
    ],
    "properties": [],
    "returns": [
      {
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "an array with length 2:",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 24,
                      "offset": 23
                    },
                    "indent": []
                  }
                },
                {
                  "type": "html",
                  "value": "<br>",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 24,
                      "offset": 23
                    },
                    "end": {
                      "line": 1,
                      "column": 28,
                      "offset": 27
                    },
                    "indent": []
                  }
                },
                {
                  "type": "text",
                  "value": "\nposition 0 - a function ",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 28,
                      "offset": 27
                    },
                    "end": {
                      "line": 2,
                      "column": 25,
                      "offset": 52
                    },
                    "indent": [
                      1
                    ]
                  }
                },
                {
                  "type": "emphasis",
                  "children": [
                    {
                      "type": "text",
                      "value": "setValue",
                      "position": {
                        "start": {
                          "line": 2,
                          "column": 26,
                          "offset": 53
                        },
                        "end": {
                          "line": 2,
                          "column": 34,
                          "offset": 61
                        },
                        "indent": []
                      }
                    }
                  ],
                  "position": {
                    "start": {
                      "line": 2,
                      "column": 25,
                      "offset": 52
                    },
                    "end": {
                      "line": 2,
                      "column": 35,
                      "offset": 62
                    },
                    "indent": []
                  }
                },
                {
                  "type": "text",
                  "value": " to modify the data in the store. When used, this function return a promise that resolve nothing, thus you can use ",
                  "position": {
                    "start": {
                      "line": 2,
                      "column": 35,
                      "offset": 62
                    },
                    "end": {
                      "line": 2,
                      "column": 150,
                      "offset": 177
                    },
                    "indent": []
                  }
                },
                {
                  "type": "inlineCode",
                  "value": "setValue('a value').then(() => {doSomething() //when the store did update})",
                  "position": {
                    "start": {
                      "line": 2,
                      "column": 150,
                      "offset": 177
                    },
                    "end": {
                      "line": 2,
                      "column": 227,
                      "offset": 254
                    },
                    "indent": []
                  }
                },
                {
                  "type": "html",
                  "value": "<br>",
                  "position": {
                    "start": {
                      "line": 2,
                      "column": 227,
                      "offset": 254
                    },
                    "end": {
                      "line": 2,
                      "column": 231,
                      "offset": 258
                    },
                    "indent": []
                  }
                },
                {
                  "type": "text",
                  "value": "\nposition 1 - a function ",
                  "position": {
                    "start": {
                      "line": 2,
                      "column": 231,
                      "offset": 258
                    },
                    "end": {
                      "line": 3,
                      "column": 25,
                      "offset": 283
                    },
                    "indent": [
                      1
                    ]
                  }
                },
                {
                  "type": "emphasis",
                  "children": [
                    {
                      "type": "text",
                      "value": "deleteValue",
                      "position": {
                        "start": {
                          "line": 3,
                          "column": 26,
                          "offset": 284
                        },
                        "end": {
                          "line": 3,
                          "column": 37,
                          "offset": 295
                        },
                        "indent": []
                      }
                    }
                  ],
                  "position": {
                    "start": {
                      "line": 3,
                      "column": 25,
                      "offset": 283
                    },
                    "end": {
                      "line": 3,
                      "column": 38,
                      "offset": 296
                    },
                    "indent": []
                  }
                },
                {
                  "type": "text",
                  "value": " to delete the data in the store. When used, this function return a promise that resolve nothing, thus you can use ",
                  "position": {
                    "start": {
                      "line": 3,
                      "column": 38,
                      "offset": 296
                    },
                    "end": {
                      "line": 3,
                      "column": 153,
                      "offset": 411
                    },
                    "indent": []
                  }
                },
                {
                  "type": "inlineCode",
                  "value": "deleteValue('a value').then(() => {doSomething() //when the store did update})",
                  "position": {
                    "start": {
                      "line": 3,
                      "column": 153,
                      "offset": 411
                    },
                    "end": {
                      "line": 3,
                      "column": 233,
                      "offset": 491
                    },
                    "indent": []
                  }
                },
                {
                  "type": "html",
                  "value": "<br>",
                  "position": {
                    "start": {
                      "line": 3,
                      "column": 233,
                      "offset": 491
                    },
                    "end": {
                      "line": 3,
                      "column": 237,
                      "offset": 495
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 3,
                  "column": 237,
                  "offset": 495
                },
                "indent": [
                  1,
                  1
                ]
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 3,
              "column": 237,
              "offset": 495
            }
          }
        },
        "title": "returns",
        "type": {
          "type": "NameExpression",
          "name": "array"
        }
      }
    ],
    "sees": [],
    "throws": [],
    "todos": [],
    "yields": [],
    "name": "useSetAndDelete",
    "kind": "function",
    "members": {
      "global": [],
      "inner": [],
      "instance": [],
      "events": [],
      "static": []
    },
    "path": [
      {
        "name": "useSetAndDelete",
        "kind": "function"
      }
    ],
    "namespace": "useSetAndDelete"
  },
  {
    "description": "",
    "tags": [
      {
        "title": "param",
        "description": "the name of the variable / value to be retrieved in the global store.",
        "lineNumber": 2,
        "type": {
          "type": "NameExpression",
          "name": "string"
        },
        "name": "key"
      },
      {
        "title": "param",
        "description": "an optional default value, if the value in the global store is not present.",
        "lineNumber": 3,
        "type": {
          "type": "OptionalType",
          "expression": {
            "type": "NameExpression",
            "name": "any"
          }
        },
        "name": "defaultValue"
      },
      {
        "title": "returns",
        "description": "the value on the global store, or the default value if passed, or `undefined`",
        "lineNumber": 5,
        "type": {
          "type": "NameExpression",
          "name": "any"
        }
      }
    ],
    "loc": {
      "start": {
        "line": 146,
        "column": 0
      },
      "end": {
        "line": 152,
        "column": 3
      }
    },
    "context": {
      "loc": {
        "start": {
          "line": 153,
          "column": 0
        },
        "end": {
          "line": 155,
          "column": 1
        }
      },
      "file": "/home/lspinelli/workspaces/my-github/react-context-hook/src/useStore.js",
      "github": {
        "url": "https://git@github.com/:Spyna/react-context-hook/blob/6e2546239cbaf9efbe881bb73bb286d7af3f224e/src/useStore.js#L153-L155",
        "path": "src/useStore.js"
      }
    },
    "augments": [],
    "examples": [],
    "implements": [],
    "params": [
      {
        "title": "param",
        "name": "key",
        "lineNumber": 2,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "the name of the variable / value to be retrieved in the global store.",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 70,
                      "offset": 69
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 70,
                  "offset": 69
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 70,
              "offset": 69
            }
          }
        },
        "type": {
          "type": "NameExpression",
          "name": "string"
        }
      },
      {
        "title": "param",
        "name": "defaultValue",
        "lineNumber": 3,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "an optional default value, if the value in the global store is not present.",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 76,
                      "offset": 75
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 76,
                  "offset": 75
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 76,
              "offset": 75
            }
          }
        },
        "type": {
          "type": "OptionalType",
          "expression": {
            "type": "NameExpression",
            "name": "any"
          }
        }
      }
    ],
    "properties": [],
    "returns": [
      {
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "the value on the global store, or the default value if passed, or ",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 1,
                      "offset": 0
                    },
                    "end": {
                      "line": 1,
                      "column": 67,
                      "offset": 66
                    },
                    "indent": []
                  }
                },
                {
                  "type": "inlineCode",
                  "value": "undefined",
                  "position": {
                    "start": {
                      "line": 1,
                      "column": 67,
                      "offset": 66
                    },
                    "end": {
                      "line": 1,
                      "column": 78,
                      "offset": 77
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 1,
                  "column": 1,
                  "offset": 0
                },
                "end": {
                  "line": 1,
                  "column": 78,
                  "offset": 77
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 1,
              "column": 1,
              "offset": 0
            },
            "end": {
              "line": 1,
              "column": 78,
              "offset": 77
            }
          }
        },
        "title": "returns",
        "type": {
          "type": "NameExpression",
          "name": "any"
        }
      }
    ],
    "sees": [],
    "throws": [],
    "todos": [],
    "yields": [],
    "name": "useStoreValue",
    "kind": "function",
    "members": {
      "global": [],
      "inner": [],
      "instance": [],
      "events": [],
      "static": []
    },
    "path": [
      {
        "name": "useStoreValue",
        "kind": "function"
      }
    ],
    "namespace": "useStoreValue"
  }
]