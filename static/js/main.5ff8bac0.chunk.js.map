{"version":3,"sources":["../../src/StoreContext.js","../../src/redux/actionTypes.js","../../src/redux/reducer.js","../../src/redux/middleware.js","../../src/redux/store.js","../../src/redux/actions.js","../../src/rawStore.js","../../src/defaultConfig.js","../../src/redux/util/Subscription.js","../../src/withStore.js","../../src/useStore.js","layout/Header.js","utils/useFlash.js","SetAmountExample.js","SetUsernameExample.js","SetObjectExample.js","UseStoreExample.js","UseSetAndDeleteExample.js","Description.js","UseStoreValueWithFalsyValues.js","App.js","index.js"],"names":["React","SET_VALUE","REMOVE_VALUE","RESET","combineReducers","main","state","action","key","value","newState","logger","getState","prevState","returnValue","next","console","listenerMiddleware","listener","prevValue","nextValue","storeCreator","initialValue","config","logging","middlewares","createStore","applyMiddleware","setStoreValueAction","type","payload","deleteStoreValueAction","createRawStore","store","reset","resetStoreWithValue","set","delete","Subscription","this","onStateChange","subscribe","useSelector","stateSelectorFn","forceRender","useReducer","s","useContext","latestStateSelectorFn","useRef","latestSelectedState","newSelectedState","a","b","err","subscription","useMemo","resultValue","useEffect","checkForUpdates","useStore","defaultValue","useStoreValue","useSetStoreValue","useDeleteStoreValue","storeValue","Header","className","href","useFlashWhenRender","ref","current","classList","toggle","setTimeout","SetAmountExample","count","setCount","deleteCount","id","onClick","SetUsernameExample","username","setUsername","useState","textValue","setTextValue","onSubmit","event","preventDefault","onChange","target","name","placeholder","storeKey","SetObjectExample","object","surname","access_token","token","expires_in","setObject","deleteObject","JSON","stringify","UseStoreExample","price","setPrice","deletePrice","UseSetAndDeleteExample","setValue","deleteValue","Description","globalState","UseStoreValueWithFalsyValues","login","counter","nullValue","withStore","WrappedComponent","Object","rawStore","props","StoreContext","logIn","log","process","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.5ff8bac0.chunk.js","sourcesContent":["import React from 'react'\nexport default React.createContext(null)\n","export const SET_VALUE = 'SET VALUE'\nexport const REMOVE_VALUE = 'REMOVE VALUE'\nexport const RESET = 'RESET STORE'\n","import { combineReducers } from 'redux'\n\nimport { SET_VALUE, REMOVE_VALUE, RESET } from './actionTypes'\n\nfunction mainReducer(state = {}, action) {\n  switch (action.type) {\n    case SET_VALUE: {\n      const { key, value } = action.payload\n      const newState = {\n        ...state\n      }\n      newState[key] = value\n      return newState\n    }\n    case REMOVE_VALUE: {\n      const { key } = action.payload\n      const newState = {\n        ...state\n      }\n      delete newState[key]\n      return newState\n    }\n    case RESET: {\n      return action.payload\n    }\n    default:\n      return state\n  }\n}\n\nexport default combineReducers({ main: mainReducer })\n","export const logger = ({ getState }) => (next) => (action) => {\n  const prevState = getState().main\n  const returnValue = next(action)\n  console.group(`%c react-context-hook`, 'font-weight: bold')\n  console.info(\n    `%c ${'PREV STATE'} `,\n    'background: #00e5a0;font-weight: bold',\n    prevState\n  )\n  console.info(\n    `%c ${'ACTION'} %c ${action.type}`,\n    'background: yellow;font-weight: bold',\n    'font-weight: bold;',\n    action.payload.key || '',\n    action.payload.value || action.payload\n  )\n  console.info(\n    `%c ${'NEXT STATE'} `,\n    'background: #00cbff;font-weight: bold',\n    getState().main\n  )\n  console.groupEnd()\n  return returnValue\n}\n\nexport const listenerMiddleware = (listener) => ({ getState }) => (next) => (\n  action\n) => {\n  const { key } = action.payload\n  const prevValue = getState().main[key]\n  const value = next(action)\n  const nextValue = getState().main[key]\n  listener(getState().main, key, prevValue, nextValue)\n  return value\n}\n\n/**\n * @deprecated Use listenerMiddleware\n */\nexport const listernerMiddleware = listenerMiddleware\n","import { createStore, applyMiddleware } from 'redux'\nimport rootReducer from './reducer'\nimport { logger, listenerMiddleware } from './middleware'\n\nexport default function storeCreator(initialValue = {}, config = {}) {\n  const { logging, listener } = config\n\n  const middlewares = [\n    listener && listenerMiddleware(listener),\n    logging && logger\n  ].filter(Boolean)\n\n  return createStore(\n    rootReducer,\n    { main: initialValue },\n    applyMiddleware(...middlewares)\n  )\n}\n","import { SET_VALUE, REMOVE_VALUE, RESET } from './actionTypes'\n\nexport const setStoreValueAction = (key, value) => ({\n  type: SET_VALUE,\n  payload: {\n    key,\n    value\n  }\n})\n\nexport const deleteStoreValueAction = (key) => ({\n  type: REMOVE_VALUE,\n  payload: {\n    key\n  }\n})\n\nexport const resetStoreWithValue = (state = {}) => ({\n  type: RESET,\n  payload: state\n})\n","import {\n  resetStoreWithValue,\n  setStoreValueAction,\n  deleteStoreValueAction\n} from './redux/actions'\n\nexport function createRawStore(store) {\n  return {\n    /**\n     * Resets the state to the given input.\n     *\n     * @param {Object} state the new value to reset the state to.\n     */\n    reset: function (state) {\n      store.dispatch(resetStoreWithValue(state))\n    },\n    /**\n     * Sets the specified key in the store. This function is equivaluent to the `useSetStoreValue` hook.\n     *\n     * @param {string} key the property to set in the store\n     * @param {Object} value the value of the property\n     */\n    set: function (key, value) {\n      store.dispatch(setStoreValueAction(key, value))\n    },\n    /**\n     * delete the specified key from the store. This function is equivaluent to the `useDeleteStoreValue` hook.\n     *\n     * @param {string} key the property to set in the store\n     */\n    delete: function (key) {\n      store.dispatch(deleteStoreValueAction(key))\n    },\n    /**\n     * @returns the global state value of the store\n     */\n    getState: function () {\n      return store.getState().main\n    }\n  }\n}\n","export default {}\n","class Subscription {\n  constructor(store, onStateChange) {\n    this.store = store\n    // this.handleChangeWrapper = this.handleChangeWrapper.bind(this)\n    this.unsuscribeFromSubscription = null\n    this.onStateChange = onStateChange.bind(this)\n  }\n\n  subscribe() {\n    this.unsuscribeFromSubscription = this.store.subscribe(this.onStateChange)\n  }\n\n  unsubscribe() {\n    this.unsuscribeFromSubscription()\n    this.unsuscribeFromSubscription = null\n  }\n}\n\nexport default Subscription\n","import React from 'react'\nimport StoreContext from './StoreContext'\nimport createStore from './redux/store'\nimport { createRawStore } from './rawStore'\nimport defaultConfig from './defaultConfig'\n\n/**\n * This store can be used outside of React components.\n */\nlet rawStore = createRawStore(createStore())\n\n/**\n * @callback ConfigListener\n * @param {Object} state\n * @param {string} key\n * @param {any} prevValue\n * @param {any} nextValue\n * @returns {void}\n */\n\n/**\n * @param {ReactElement} WrappedComponent the component to connect with the store\n * @param {Object} [initialValue] an Object that will be the initial store value, or nothing\n * @param {Object} [config] the custom configuration. If nothing is passed, the default config will be used.\n * @param {ConfigListener} config.listener a function that is triggered each time the global state is modified. This function takes these parameters: (state, key, prevValue, nextValue). `state` is the value of the new state, `key` is the key that changed, `prevValue` is the old value of the key, `nextValule` is the new one.\n * @param {boolean} config.logging - default `false` - if true it will log changes to console\n * @example\n *const initialState = { count: 10 }\n *\n *const storeConfig = {\n *  listener: (state, key, prevValue, nextValue) => {\n      console.log(`the key \"${key}\" changed in the store`)\n      console.log('the old value is', prevValue)\n      console.log('the current value is', nextValue)\n      console.log('the state is', state)\n    },\n *  logging: process.env.NODE_ENV !== 'production'\n *}\n *\n *export default withStore(App, initialState, storeConfig)\n */\nexport const withStore = (WrappedComponent, initialValue, config) => {\n  const userConfig = Object.freeze({ ...defaultConfig, ...config })\n  const store = createStore(initialValue, userConfig)\n  rawStore = createRawStore(store)\n  return function (props) {\n    return (\n      <StoreContext.Provider value={{ store }}>\n        <WrappedComponent {...props} />\n      </StoreContext.Provider>\n    )\n  }\n}\n\nexport { rawStore }\n","import { useContext, useReducer, useMemo, useRef, useEffect } from 'react'\nimport StoreContext from './StoreContext'\nimport Subscription from './redux/util/Subscription'\nimport { setStoreValueAction, deleteStoreValueAction } from './redux/actions'\n\nfunction equalityFn(a, b) {\n  return a === b\n}\n\nfunction useSelector(stateSelectorFn) {\n  const [, forceRender] = useReducer((s) => s + 1, 0)\n  const { store } = useContext(StoreContext)\n  const latestStateSelectorFn = useRef()\n  const latestSelectedState = useRef()\n  function checkForUpdates() {\n    try {\n      const newSelectedState = latestStateSelectorFn.current(\n        store.getState().main\n      )\n\n      if (equalityFn(newSelectedState, latestSelectedState.current)) {\n        return\n      }\n\n      latestSelectedState.current = newSelectedState\n    } catch (err) {\n      // ignore all errors\n    }\n\n    forceRender({})\n  }\n  const subscription = useMemo(() => new Subscription(store, checkForUpdates), [\n    store,\n    checkForUpdates\n  ])\n\n  let resultValue\n\n  if (stateSelectorFn !== latestStateSelectorFn.current) {\n    resultValue = stateSelectorFn(store.getState().main)\n  } else {\n    resultValue = latestSelectedState.current\n  }\n\n  useEffect(() => {\n    latestStateSelectorFn.current = stateSelectorFn\n    latestSelectedState.current = resultValue\n  })\n\n  useEffect(() => {\n    subscription.subscribe()\n    checkForUpdates()\n\n    return () => subscription.unsubscribe()\n  }, [store, subscription])\n\n  return resultValue\n}\n\n/**\n * `useStore` is a React Hook that access a value stored in the application global store. It returns the value, a function to update it (like React.useState) and a function to delete it.\n *\n * @param {string} key - The lookup key to find the saved value in the store\n * @param {any} [defaultValue] - The value if the value in the store is missing\n *\n * @returns {[any, (value: any) => Promise<void>, (value: any) => Promise<void>]}\n * @return {array} an array with length 3:<br>\n * position 0 - the value of the data in the store.<br>\n * position 1 - a function *setValue* to modify the data in the store. When used, this function return a promise that resolve nothing, thus you can use `setValue('a value').then(() => {doSomething() //when the store did update})`<br>\n * position 2 - a function *deleteValue* to delete the value from the store. When used, this function return a promise that resolve nothing, thus you can use `deleteValue('a value').then(() => {doSomething() //when the store did update})`\n *\n * @example\n * import {useStore} from 'react-context-hook'\n * const [username, setUsername, deleteUsername] = useStore('username')\n * <div>hello {username}</div>\n * <button onClick={()=> setUsername('my_username')}>set username</button>\n *\n */\nfunction useStore(key, defaultValue) {\n  return [\n    useStoreValue(key, defaultValue),\n    useSetStoreValue(key),\n    useDeleteStoreValue(key)\n  ]\n}\n\n/**\n * Returns a function to set or update a variable in the store. You want to use this hook when you just need to modify the store, not read or delete a value from it.\n * @param {string} key - the name of the variable to set in the store\n * @returns {(value: any) => Promise<void>}\n * @return {Function} - a function to set a variable in the store with the given name When used, this function return a promise that resolve nothing, thus you can use `setValue('a value').then(() => {doSomething() //when the store did update})`\n *\n * @example\n * import {useSetStoreValue} from 'react-context-hook'\n * const setUsername = useSetStoreValue('username')\n * <button onClick={()=> setUsername('my_username')}>set username</button>\n */\nfunction useSetStoreValue(key) {\n  const { store } = useContext(StoreContext)\n  return function (value) {\n    store.dispatch(setStoreValueAction(key, value))\n  }\n}\n\n/**\n * Returns a function to delete a variable in the store. You want to use this hook when you just need to delete a value in the store, not read or set a value from it.\n * @param {string} key - the name of the variable to set in the store\n * @returns {(value: any) => Promise<void>}\n * @return {Function} - a function to delete a variable in the store with the given name. When used, this function return a promise that resolve nothing, thus you can use `deleteValue('a value').then(() => {doSomething() //when the store did update})`\n *\n * @example\n * import {useDeleteStoreValue} from 'react-context-hook'\n * const deleteUsername = useDeleteStoreValue('username')\n * <button onClick={()=> deleteUsername('my_username')}>set username</button>\n */\nfunction useDeleteStoreValue(key) {\n  const { store } = useContext(StoreContext)\n  return function (value) {\n    store.dispatch(deleteStoreValueAction(key, value))\n  }\n}\n\n/**\n *This React hook returns an array to read and modify a value in the store:\n * `const [value, setValue] = useGetAndSet('a_lookup_key_in_the_store')`. The name of the variable in the arry is arbitrary and you can choose any string you like.\n * @param {string} key - The lookup key to find the saved value in the store\n * @param {any} [defaultValue] - The default value if missing\n * @returns {[any, (value: any) => Promise<void>]}\n * @return {array} an array with length 2:<br>\n * position 0 - the value of the data in the store.<br>\n * position 1 - a function *setValue* to modify the data in the store. When used, this function return a promise that resolve nothing, thus you can use `setValue('a value').then(() => {doSomething() //when the store did update})`<br>\n *\n * @example\n * import {useGetAndSet} from 'react-context-hook'\n * const [username, setUsername] = useGetAndSet('username')\n * <div>hello {username}</div>\n * <button onClick={()=> setUsername('my_username')}>set username</button>\n *\n *  const [value, setValue] = useGetAndSet('a_lookup_key_in_the_store')\n *\n */\nfunction useGetAndSet(key, defaultValue) {\n  return [useStoreValue(key, defaultValue), useSetStoreValue(key)]\n}\n\n/**\n *This React hook returns an array to read and delete a value in the store:\n * `const [value, deleteValue] = useGetAndDelete('a_lookup_key_in_the_store')`. The name of the variable in the arry is arbitrary and you can choose any string you like.\n * @param {string} key - The lookup key to find the saved value in the store\n *\n * @returns {[any, (value: any) => Promise<void>]}\n * @return {array} an array with length 2:<br>\n * position 0 - the value of the data in the store.<br>\n * position 1 - a function *deleteValue* to delete the data in the store. When used, this function return a promise that resolve nothing, thus you can use `deleteValue('a value').then(() => {doSomething() //when the store did update})`<br>\n *\n * @example\n * import {useGetAndDelete} from 'react-context-hook'\n * const [username, deleteUsername] = useGetAndDelete('username')\n * <div>hello {username}</div>\n * <button onClick={()=> deleteUsername('my_username')}>set username</button>\n *\n */\nfunction useGetAndDelete(key) {\n  return [useStoreValue(key), useDeleteStoreValue(key)]\n}\n\n/**\n *This React hook returns an array to set and delete a value in the store:\n * `const [setValue, deleteValue] = useGetAndDelete('a_lookup_key_in_the_store')`. The name of the variable in the arry is arbitrary and you can choose any string you like.\n * @param {string} key - The lookup key to find the saved value in the store\n *\n * @returns {[(value: any) => Promise<void>, (value: any) => Promise<void>]}\n * @return {array} an array with length 2:<br>\n * position 0 - a function *setValue* to modify the data in the store. When used, this function return a promise that resolve nothing, thus you can use `setValue('a value').then(() => {doSomething() //when the store did update})`<br>\n * position 1 - a function *deleteValue* to delete the data in the store. When used, this function return a promise that resolve nothing, thus you can use `deleteValue('a value').then(() => {doSomething() //when the store did update})`<br>\n *\n * @example\n * import {useGetAndDelete} from 'react-context-hook'\n * const [username, deleteUsername] = useGetAndDelete('username')\n * <div>hello {username}</div>\n * <button onClick={()=> deleteUsername('my_username')}>set username</button>\n *\n */\nfunction useSetAndDelete(key) {\n  return [useSetStoreValue(key), useDeleteStoreValue(key)]\n}\n\n/**\n *\n * @param {string} key - the name of the variable / value to be retrieved in the global store.\n * @param {any} [defaultValue] - an optional default value, if the value in the global store is not present.\n *\n * @returns {any | undefined} the value on the global store, or the default value if passed, or `undefined`\n */\nfunction useStoreValue(key, defaultValue) {\n  function stateSelector(state) {\n    return state[key]\n  }\n  const storeValue = useSelector(stateSelector)\n  return storeValue !== undefined ? storeValue : defaultValue\n}\n\n/**\n * Returns the whole store value, with all the variables stored in it. Changes to this object will not change the store\n *\n * @returns {Record}\n * @return {object} - An object representing the whole store value in read only mode.\n *\n * @example\n * import {useStoreState} from 'react-context-hook'\n * const store = useStoreState()\n * console.log('the store is', JSON.stringify(store))\n */\nfunction useStoreState() {\n  function stateSelector(state) {\n    return state\n  }\n  return useSelector(stateSelector)\n}\n\nexport {\n  useStore,\n  useStoreState,\n  useStoreValue,\n  useSetStoreValue,\n  useDeleteStoreValue,\n  useGetAndSet,\n  useGetAndDelete,\n  useSetAndDelete\n}\n","import React from 'react'\n\nexport default function Header() {\n  return (\n    <header className=\"App-header\">\n      <h1>\n        React context Hook <a href=\"docs\">Documentation</a>{' '}\n        <a href=\"https://github.com/Spyna/react-context-hook\">GitHub</a>.\n      </h1>\n      <h2>A 3 KB library to manage the global state with React hooks.</h2>\n    </header>\n  )\n}\n","import React from 'react'\n\nexport const useFlashWhenRender = () => {\n  const ref = React.useRef()\n  React.useEffect(() => {\n    ref.current.classList.toggle('flash')\n    setTimeout(() => ref.current && ref.current.classList.toggle('flash'), 100)\n  })\n  return ref\n}\n","import React from 'react'\nimport { useStore } from 'react-context-hook'\nimport { useFlashWhenRender } from './utils/useFlash'\n\nexport default function SetAmountExample() {\n  const [count, setCount, deleteCount] = useStore('count', 0)\n  return (\n    <section ref={useFlashWhenRender()}>\n      <h3>\n        Set the value <em>\"count\"</em> in the store\n      </h3>\n      <button id=\"decrement\" onClick={() => setCount(count - 1)}>\n        Decrement -{' '}\n      </button>\n      <span className=\"count\">{count}</span>\n      <button id=\"increment\" onClick={() => setCount(count + 1)}>\n        Increment +{' '}\n      </button>\n      <button id=\"delete-count\" onClick={() => deleteCount()}>\n        Delete \"count\" from store\n      </button>\n    </section>\n  )\n}\n","import React from 'react'\nimport { useStore } from 'react-context-hook'\nimport { useFlashWhenRender } from './utils/useFlash'\n\nexport default function SetUsernameExample() {\n  const [username, setUsername] = useStore('username', 'spyna', false)\n  const [textValue, setTextValue] = React.useState(username)\n  function onChange(event) {\n    setTextValue(event.target.value)\n  }\n\n  function onSubmit(event) {\n    event.preventDefault()\n    setUsername(textValue)\n  }\n\n  return (\n    <section ref={useFlashWhenRender()}>\n      <h3>\n        Set the value <em>\"username\"</em> in the store\n      </h3>\n      <form onSubmit={onSubmit}>\n        <input\n          onChange={onChange}\n          value={textValue}\n          name=\"username\"\n          placeholder=\"type your username\"\n        />\n        <button id=\"set-username\">Change value in store</button>\n      </form>\n    </section>\n  )\n}\n","import React from 'react'\nimport {\n  useStoreValue,\n  useSetStoreValue,\n  useDeleteStoreValue\n} from 'react-context-hook'\nimport { useFlashWhenRender } from './utils/useFlash'\n\nconst storeKey = 'login.logged_user'\n\nexport default function SetObjectExample() {\n  const defaultValue = {\n    name: 'My name',\n    surname: ' surname',\n    access_token: {\n      type: 'Bearer',\n      token: 'd293LCB5b3UgYXJlIHZlcnkgY3VyaW91cyEgZ29vZCBmb3IgeW91',\n      expires_in: 3600\n    }\n  }\n  const object = useStoreValue(storeKey, defaultValue)\n  const setObject = useSetStoreValue(storeKey)\n  const deleteObject = useDeleteStoreValue(storeKey)\n  return (\n    <section ref={useFlashWhenRender()}>\n      <h3>\n        Set/Remove this object in the store with the key <code>{storeKey}</code>\n      </h3>\n      <pre>\n        <code>{JSON.stringify(object, null, ' ')}</code>\n      </pre>\n      <button onClick={() => setObject(object)}>set Object in store</button>\n      <button onClick={() => deleteObject()}>remove Object from store</button>\n    </section>\n  )\n}\n","import React from 'react'\nimport { useStore } from 'react-context-hook'\nimport { useFlashWhenRender } from './utils/useFlash'\n\nexport default function UseStoreExample() {\n  const [price, setPrice, deletePrice] = useStore('price')\n  return (\n    <section ref={useFlashWhenRender()}>\n      <h3>\n        Set/Remove the key<code>price</code> with the value of{' '}\n        <code>99.9 $</code>\n      </h3>\n      <pre>\n        <code>{price}</code>\n      </pre>\n      <button onClick={() => setPrice('99.9 $')}>set price in store</button>\n      <button onClick={() => deletePrice()}>remove prce from store</button>\n    </section>\n  )\n}\n","import React from 'react'\nimport { useSetAndDelete } from 'react-context-hook'\nimport { useFlashWhenRender } from './utils/useFlash'\n\nexport default function UseSetAndDeleteExample() {\n  const [setValue, deleteValue] = useSetAndDelete('a-sample-key')\n  return (\n    <section ref={useFlashWhenRender()}>\n      <h3>\n        Set/Remove the key<code>'a-sample-key'</code> with the value{' '}\n        <code>'the value'</code>\n      </h3>\n      <button id=\"set-a-value\" onClick={() => setValue('the value')}>\n        set 'a-sample-key' in store\n      </button>\n      <button id=\"delete-a-value\" onClick={() => deleteValue()}>\n        remove 'a-sample-key' from store\n      </button>\n    </section>\n  )\n}\n","import React from 'react'\nimport { useStoreState } from 'react-context-hook'\nimport { useFlashWhenRender } from './utils/useFlash'\n\nexport default function Description() {\n  const globalState = useStoreState()\n  return (\n    <section ref={useFlashWhenRender()}>\n      <h3>\n        This is a React App that has a global state. This is the value of the\n        global <em>state</em>.\n      </h3>\n      <pre>\n        <code id=\"global-state\">{JSON.stringify(globalState, null, ' ')}</code>\n      </pre>\n      <p>\n        You can change the global state from different components, using the\n        buttons you find in this page\n      </p>\n      <p>Every time a component renders, it flashes. </p>\n    </section>\n  )\n}\n","import React from 'react'\nimport { useStoreValue } from 'react-context-hook'\nimport { useFlashWhenRender } from './utils/useFlash'\n\nexport default function UseStoreValueWithFalsyValues() {\n  const login = useStoreValue('logIn')\n  const counter = useStoreValue('counter')\n  const nullValue = useStoreValue('nullValue')\n  return (\n    <section ref={useFlashWhenRender()}>\n      <h3>\"Falsy\" value are preserved</h3>\n      <p>\n        \"logIn\" value is: <code>{JSON.stringify(login)}</code>\n      </p>\n      <p>\n        \"counter\" (not count) value is: <code>{JSON.stringify(counter)}</code>\n      </p>\n      <p>\n        \"nullValue\" value is: <code>{JSON.stringify(nullValue)}</code>\n      </p>\n    </section>\n  )\n}\n","import React from 'react'\nimport { withStore } from 'react-context-hook'\nimport Header from './layout/Header'\nimport SetAmount from './SetAmountExample'\nimport SetUsernameExample from './SetUsernameExample'\nimport './App.css'\nimport SetObjectExample from './SetObjectExample'\nimport UseStoreExample from './UseStoreExample'\nimport UseSetAndDeleteExample from './UseSetAndDeleteExample'\nimport Description from './Description'\nimport UseStoreValueWithFalsyValues from './UseStoreValueWithFalsyValues'\n\nfunction App() {\n  return (\n    <div>\n      <Header />\n      <main className=\"App\">\n        <Description />\n        <SetAmount />\n        <SetUsernameExample />\n        <SetObjectExample />\n        <UseStoreExample />\n        <UseSetAndDeleteExample />\n        <UseStoreValueWithFalsyValues />\n      </main>\n    </div>\n  )\n}\n\nconst initialState = { count: 10, logIn: false, counter: 0, nullValue: null }\n\nconst storeConfig = {\n  listener: (state, key, prevValue, nextValue) => {\n    if (process.env.NODE_ENV !== 'test') {\n      console.log(`the key \"${key}\" changed in the store`)\n      console.log('the old value is', prevValue)\n      console.log('the current value is', nextValue)\n      console.log('the state is', state)\n    }\n  },\n  logging: process.env.NODE_ENV !== 'test'\n}\n\nexport default withStore(App, initialState, storeConfig)\n","import React from 'react'\nimport ReactDOM from 'react-dom'\n\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}