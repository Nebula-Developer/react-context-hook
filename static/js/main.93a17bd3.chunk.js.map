{"version":3,"sources":["../../dist/index.es.js","layout/Header.js","SetAmount.js","SetString.js","nonComponent.js","SetObject.js","UseStoreExample.js","UseSetAndDeleteExample.js","App.js","index.js"],"names":["StoreContext","createContext","_defineProperty","obj","key","value","Object","defineProperty","enumerable","configurable","writable","ownKeys","object","enumerableOnly","keys","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","push","apply","_objectSpread2","target","i","arguments","length","source","forEach","getOwnPropertyDescriptors","defineProperties","_slicedToArray","arr","Array","isArray","_arrayWithHoles","Symbol","iterator","prototype","toString","call","_arr","_n","_d","_e","undefined","_s","_i","next","done","err","_iterableToArrayLimit","TypeError","_nonIterableRest","rawStore","warnUser","prop","console","group","error","concat","groupEnd","storeHandler","set","deleteProperty","defaultConfig","listener","proxyStore","stack","devTools","state","action","log","_stack","prevState","info","getStore","useStore","defaultValue","createIfMissing","store","get","setValue","useSetStoreValue","deleteValue","useDeleteStoreValue","useStoreValue","remove","title","subtitle","className","href","count","setCount","deleteCount","onClick","username","setUsername","React","useState","textValue","setTextValue","onSubmit","event","preventDefault","onChange","placeholder","then","storeKey","name","surname","access_token","type","token","expires_in","setObject","deleteObject","JSON","stringify","price","setPrice","deletePrice","WrappedComponent","initialValue","config","withStore","globalState","getState","Header","nonComponent","SetAmount","SetString","SetObject","UseStoreExample","UseSetAndDeleteExample","logging","props","_useState2","setState","userConfig","freeze","updateState","storage","Promise","resolve","newState","assign","Proxy","createStore","createElement","Provider","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.93a17bd3.chunk.js","sourcesContent":["import React, { useState, useContext } from 'react';\nvar StoreContext = React.createContext();\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread2(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(source, true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(source).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest();\n}\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nfunction _iterableToArrayLimit(arr, i) {\n  if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === \"[object Arguments]\")) {\n    return;\n  }\n\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n}\n\nvar warnUser = function warnUser(prop) {\n  console.group('%c react-context-hook ', 'background: #fcc; color: #333');\n  console.error(\"Sorry, you can't modify the [\".concat(prop, \"] property this way.\"));\n  console.groupEnd();\n};\n\nvar storeHandler = {\n  set: function set(obj, prop, value) {\n    warnUser(prop);\n    return true;\n  },\n  deleteProperty: function deleteProperty(target, prop) {\n    warnUser(prop);\n    return true;\n  }\n};\nvar defaultConfig = {\n  listener: function listener() {},\n  proxyStore: true\n};\nvar stack = [];\nvar devTools = {\n  push: function push(state, action, key, value) {\n    stack.push({\n      action: action,\n      state: state,\n      key: key,\n      value: value\n    });\n  },\n  log: function log(state) {\n    var _stack = stack[stack.length - 1],\n        action = _stack.action,\n        prevState = _stack.state,\n        key = _stack.key,\n        value = _stack.value;\n    console.group(\"%c react-context-hook\", 'font-weight: bold');\n    console.info(\"%c \".concat('PREV STATE', \" \"), 'background: #00e5a0;font-weight: bold', prevState);\n    console.info(\"%c \".concat('ACTION', \" %c \", action), 'background: yellow;font-weight: bold', 'font-weight: bold;', key, value);\n    console.info(\"%c \".concat('NEXT STATE', \" \"), 'background: #00cbff;font-weight: bold', state);\n    console.groupEnd();\n  }\n};\n\nfunction createStore() {\n  var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : defaultConfig;\n  var initialValue = arguments.length > 1 ? arguments[1] : undefined;\n\n  var _useState = useState(initialValue),\n      _useState2 = _slicedToArray(_useState, 2),\n      state = _useState2[0],\n      setState = _useState2[1];\n\n  var userConfig = Object.freeze(_objectSpread2({}, defaultConfig, {}, config));\n  var listener = userConfig.listener,\n      proxyStore = userConfig.proxyStore,\n      logging = userConfig.logging;\n\n  if (logging) {\n    devTools.log(initialValue);\n  }\n\n  function updateState(storage) {\n    return new Promise(function (resolve) {\n      var newState = _objectSpread2({}, state, {}, storage);\n\n      setState(newState);\n      resolve(storage);\n\n      if (logging) {\n        devTools.log(newState);\n      }\n\n      listener(storage);\n    });\n  }\n\n  var store = {\n    get: function get(key, defaultValue) {\n      var value = state[key];\n\n      if (value === undefined) {\n        value = defaultValue;\n      }\n\n      return value;\n    },\n    set: function set(key, value) {\n      if (logging) {\n        devTools.push(_objectSpread2({}, state), 'set', key, value);\n      }\n\n      state[key] = value;\n      return updateState(state);\n    },\n    remove: function remove(key) {\n      if (logging) {\n        devTools.push(_objectSpread2({}, state), 'remove', key);\n      }\n\n      delete state[key];\n      return updateState(state);\n    },\n    getState: function getState() {\n      return Object.assign({}, state);\n    }\n  };\n\n  if (proxyStore) {\n    store = new Proxy(store, storeHandler);\n  }\n\n  return store;\n}\n\nvar rawStore;\n/**\n * @param {ReactElement} WrappedComponent the component to connect with the store\n * @param {Object} initialValue the initial store value or nothing\n * @param {Object} config the custom configuration. If nothing is passed will use the default config\n * @param {Function} config.listener a function that is triggered each time the store is modified.\n * @param {boolean} config.proxyStore - default `true` - if true the store will be protected by a Proxy. Set to false if your environment does not support Proxy. If you use `react-context-hook` in the browser set it to true\n * @example\n *const initialState = { count: 10 }\n *\n *const storeConfig = {\n *  listener: state => {\n *    console.log('state changed', state)\n *  },\n *  logging: true //process.env.NODE_ENV !== 'production'\n *}\n *\n *export default withStore(App, initialState, storeConfig)\n */\n\nvar withStore = function withStore(WrappedComponent, initialValue, config) {\n  return function (props) {\n    var store = createStore(config, initialValue);\n    rawStore = store;\n    return React.createElement(StoreContext.Provider, {\n      value: store\n    }, React.createElement(WrappedComponent, props));\n  };\n};\n\nfunction getStore() {\n  return useContext(StoreContext);\n}\n/**\n *\n * @param {string} key - The lookup key to find the saved value in the store\n * @param {any} defaultValue - The value if the value in the store is missing\n * @param {boolean} createIfMissing - if true and the data is missing it will be created in the store\n *\n * @returns {array} an array with length 3:<br>\n * position 0 - the value of the data in the store.<br>\n * position 1 - a function *setValue* to modify the data in the store. When used, this function return a promise that resolve nothing, thus you can use `setValue('a value').then(() => {doSomething() //when the store did update})`<br>\n * position 2 - a function *deleteValue* to delete the value from the store. When used, this function return a promise that resolve nothing, thus you can use `deleteValue('a value').then(() => {doSomething() //when the store did update})`\n *\n * @example\n * import {useStore} from 'react-context-hook'\n * const [username, setUsername, deleteUsername] = useStore('username')\n * <div>hello {username}</div>\n * <button onClick={()=> setUsername('my_username')}>set username</button>\n *\n */\n\n\nfunction useStore(key, defaultValue, createIfMissing) {\n  var store = getStore();\n  var actualValue = store.get(key);\n\n  if (actualValue === undefined && createIfMissing) {\n    store.set(key, defaultValue);\n  }\n\n  var setValue = useSetStoreValue(key);\n  var deleteValue = useDeleteStoreValue(key);\n  var value = useStoreValue(key, defaultValue);\n  return [value, setValue, deleteValue];\n}\n/**\n * Returns the whole store value, with all the variables stored in it. Changes to this object will not change the store\n *\n * @returns {object} - An object representing the whole store value in read only mode.\n *\n * @example\n * import {useStoreState} from 'react-context-hook'\n * const store = useStoreState()\n * console.log('the store is', JSON.stringify(store))\n */\n\n\nfunction useStoreState() {\n  return getStore().getState();\n}\n/**\n * Returns a function to set or update a variable in the store. You want to use this hook when you just need to modify the store, not read or delete a value from it.\n * @param {string} key - the name of the variable to set in the store\n * @returns {Function} - a function to set a variable in the store with the given name When used, this function return a promise that resolve nothing, thus you can use `setValue('a value').then(() => {doSomething() //when the store did update})`\n *\n * @example\n * import {useSetStoreValue} from 'react-context-hook'\n * const setUsername = useSetStoreValue('username')\n * <button onClick={()=> setUsername('my_username')}>set username</button>\n */\n\n\nfunction useSetStoreValue(key) {\n  var store = getStore();\n  return function (value) {\n    return store.set(key, value);\n  };\n}\n/**\n * Returns a function to delete a variable in the store. You want to use this hook when you just need to delete a value in the store, not read or set a value from it.\n * @param {string} key - the name of the variable to set in the store\n * @returns {Function} - a function to delete a variable in the store with the given name. When used, this function return a promise that resolve nothing, thus you can use `deleteValue('a value').then(() => {doSomething() //when the store did update})`\n *\n * @example\n * import {useDeleteStoreValue} from 'react-context-hook'\n * const deleteUsername = useDeleteStoreValue('username')\n * <button onClick={()=> deleteUsername('my_username')}>set username</button>\n */\n\n\nfunction useDeleteStoreValue(key) {\n  var store = getStore();\n  return function () {\n    return store.remove(key);\n  };\n}\n/**\n *This React hook returns an array to read and modify a value in the store:\n * `const [value, setValue] = useGetAndset('a_lookup_key_in_the_store')`. The name of the variable in the arry is arbitrary and you can choose any string you like.\n * @param {string} key - The lookup key to find the saved value in the store\n *\n * @returns {array} an array with length 2:<br>\n * position 0 - the value of the data in the store.<br>\n * position 1 - a function *setValue* to modify the data in the store. When used, this function return a promise that resolve nothing, thus you can use `setValue('a value').then(() => {doSomething() //when the store did update})`<br>\n *\n * @example\n * import {useGetAndset} from 'react-context-hook'\n * const [username, setUsername] = useGetAndset('username')\n * <div>hello {username}</div>\n * <button onClick={()=> setUsername('my_username')}>set username</button>\n *\n *  const [value, setValue] = useGetAndset('a_lookup_key_in_the_store')\n *\n */\n\n\nfunction useGetAndset(key) {\n  return [useStoreValue(key), useSetStoreValue(key)];\n}\n/**\n *This React hook returns an array to read and delete a value in the store:\n * `const [value, deleteValue] = useGetAndDelete('a_lookup_key_in_the_store')`. The name of the variable in the arry is arbitrary and you can choose any string you like.\n * @param {string} key - The lookup key to find the saved value in the store\n *\n * @returns {array} an array with length 2:<br>\n * position 0 - the value of the data in the store.<br>\n * position 1 - a function *deleteValue* to delete the data in the store. When used, this function return a promise that resolve nothing, thus you can use `deleteValue('a value').then(() => {doSomething() //when the store did update})`<br>\n *\n * @example\n * import {useGetAndDelete} from 'react-context-hook'\n * const [username, deleteUsername] = useGetAndDelete('username')\n * <div>hello {username}</div>\n * <button onClick={()=> deleteUsername('my_username')}>set username</button>\n *\n */\n\n\nfunction useGetAndDelete(key) {\n  return [useStoreValue(key), useDeleteStoreValue(key)];\n}\n/**\n *This React hook returns an array to set and delete a value in the store:\n * `const [setValue, deleteValue] = useGetAndDelete('a_lookup_key_in_the_store')`. The name of the variable in the arry is arbitrary and you can choose any string you like.\n * @param {string} key - The lookup key to find the saved value in the store\n *\n * @returns {array} an array with length 2:<br>\n * position 0 - a function *setValue* to modify the data in the store. When used, this function return a promise that resolve nothing, thus you can use `setValue('a value').then(() => {doSomething() //when the store did update})`<br>\n * position 1 - a function *deleteValue* to delete the data in the store. When used, this function return a promise that resolve nothing, thus you can use `deleteValue('a value').then(() => {doSomething() //when the store did update})`<br>\n *\n * @example\n * import {useGetAndDelete} from 'react-context-hook'\n * const [username, deleteUsername] = useGetAndDelete('username')\n * <div>hello {username}</div>\n * <button onClick={()=> deleteUsername('my_username')}>set username</button>\n *\n */\n\n\nfunction useSetAndDelete(key) {\n  return [useSetStoreValue(key), useDeleteStoreValue(key)];\n}\n/**\n *\n * @param {string} key - the name of the variable / value to be retrieved in the global store.\n * @param {any} [defaultValue] - an optional default value, if the value in the global store is not present.\n *\n * @returns {any} the value on the global store, or the default value if passed, or `undefined`\n */\n\n\nfunction useStoreValue(key, defaultValue) {\n  return getStore().get(key, defaultValue);\n}\n\nexport { rawStore as store, useDeleteStoreValue, useGetAndDelete, useGetAndset, useSetAndDelete, useSetStoreValue, useStore, useStoreState, useStoreValue, withStore };","import React from 'react'\n\nexport default ({ title, subtitle }) => (\n  <header className=\"App-header\">\n    <nav>\n      <ul>\n        <li>\n          <a href=\"docs\">Documentation</a>\n        </li>\n\n        <li>\n          <a href=\"https://github.com/Spyna/react-context-hook\">\n            GitHub source code\n          </a>\n        </li>\n      </ul>\n    </nav>\n    <div>\n      <h2>{title}</h2>\n      <p>{subtitle}</p>\n    </div>\n  </header>\n)\n","import React from 'react'\nimport { useStore } from 'react-context-hook'\n\nexport default function() {\n  const [count, setCount, deleteCount] = useStore('count', 0)\n  return (\n    <section>\n      <h3>\n        Set the value <em>\"count\"</em> in the store\n      </h3>\n      <button onClick={() => setCount(count - 1)}>Decrement - </button>\n      <span className=\"count\">{count}</span>\n      <button onClick={() => setCount(count + 1)}>Increment + </button>\n      <button onClick={() => deleteCount()}>Delete \"count\" from store</button>\n    </section>\n  )\n}\n","import React from 'react'\nimport { useStore } from 'react-context-hook'\n\nexport default function() {\n  const [username, setUsername] = useStore('username', 'spyna', true)\n  const [textValue, setTextValue] = React.useState(username)\n  function onChange(event) {\n    setTextValue(event.target.value)\n  }\n\n  function onSubmit(event) {\n    event.preventDefault()\n    setUsername(textValue)\n  }\n\n  return (\n    <section>\n      <h3>\n        Set the value <em>\"username\"</em> in the store\n      </h3>\n      <form onSubmit={onSubmit}>\n        <input\n          onChange={onChange}\n          value={textValue}\n          placeholder=\"type your username\"\n        />\n        <button>Change value in store</button>\n      </form>\n    </section>\n  )\n}\n","import { store } from 'react-context-hook'\n\nexport default function() {\n  store.set('count', 25).then(() => {\n    console.log(`I modified the store, and I'm not a React component`)\n  })\n  store.set('pippo', 25)\n}\n","import React from 'react'\nimport {\n  useStoreValue,\n  useSetStoreValue,\n  useDeleteStoreValue\n} from 'react-context-hook'\n\nconst storeKey = 'login.logged_user'\n\nexport default function() {\n  const defaultValue = {\n    name: 'My name',\n    surname: ' surname',\n    access_token: {\n      type: 'Bearer',\n      token: 'd293LCB5b3UgYXJlIHZlcnkgY3VyaW91cyEgZ29vZCBmb3IgeW91',\n      expires_in: 3600\n    }\n  }\n  const object = useStoreValue(storeKey, defaultValue)\n  const setObject = useSetStoreValue(storeKey)\n  const deleteObject = useDeleteStoreValue(storeKey)\n  return (\n    <section>\n      <h3>\n        Set/Remove this object in the store with the key <code>{storeKey}</code>\n      </h3>\n      <pre>\n        <code>{JSON.stringify(object, null, ' ')}</code>\n      </pre>\n      <button onClick={() => setObject(object)}>set Object in store</button>\n      <button onClick={() => deleteObject()}>remove Object from store</button>\n    </section>\n  )\n}\n","import React from 'react'\nimport { useStore } from 'react-context-hook'\n\nexport default function() {\n  const [price, setPrice, deletePrice] = useStore('price')\n  return (\n    <section>\n      <h3>\n        Set/Remove the key<code>price</code> with the value of{' '}\n        <code>99.9 $</code>\n      </h3>\n      <pre>\n        <code>{price}</code>\n      </pre>\n      <button onClick={() => setPrice('99.9 $')}>set price in store</button>\n      <button onClick={() => deletePrice()}>remove prce from store</button>\n    </section>\n  )\n}\n","import React from 'react'\nimport { useSetAndDelete } from 'react-context-hook'\n\nexport default function() {\n  const [setValue, deleteValue] = useSetAndDelete('a-sample-key')\n  return (\n    <section>\n      <h3>\n        Set/Remove the key<code>'a-sample-key'</code> with the value{' '}\n        <code>'the value'</code>\n      </h3>\n      <button onClick={() => setValue('the value')}>\n        set 'a-sample-key' in store\n      </button>\n      <button onClick={() => deleteValue()}>\n        remove 'a-sample-key' from store\n      </button>\n    </section>\n  )\n}\n","import React from 'react'\nimport { withStore, useStoreState } from 'react-context-hook'\nimport Header from './layout/Header'\nimport SetAmount from './SetAmount'\nimport SetString from './SetString'\nimport nonComponent from './nonComponent'\nimport './App.css'\nimport SetObject from './SetObject'\nimport UseStoreExample from './UseStoreExample'\nimport UseSetAndDeleteExample from './UseSetAndDeleteExample'\n\nfunction App() {\n  const globalState = useStoreState()\n  return (\n    <div className=\"App\">\n      <Header\n        title=\"React context Hook\"\n        subtitle=\"A 1.2kB library to manage the global state with the Context API and React hooks\"\n      />\n      <section>\n        <h3>\n          This is a React App that has a global state. This is the global{' '}\n          <em>store</em> value.\n        </h3>\n        <pre>\n          <code>{JSON.stringify(globalState, null, ' ')}</code>\n        </pre>\n        <h4>\n          You can change the global state from different components, using the\n          buttons you find in this page\n        </h4>\n        <p>\n          Uh, you can event\n          <button onClick={() => nonComponent()}>Modify the store</button> from\n          a <em>NON Component</em> Object or function.\n        </p>\n      </section>\n      <SetAmount />\n      <SetString />\n      <SetObject />\n      <UseStoreExample />\n      <UseSetAndDeleteExample />\n    </div>\n  )\n}\n\nconst initialState = { count: 10 }\n\nconst storeConfig = {\n  listener: state => {\n    console.log('state changed', state)\n  },\n  logging: true //process.env.NODE_ENV !== 'production'\n}\n\nexport default withStore(App, initialState, storeConfig)\n","import React from 'react'\nimport ReactDOM from 'react-dom'\n\nimport './index.css'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}